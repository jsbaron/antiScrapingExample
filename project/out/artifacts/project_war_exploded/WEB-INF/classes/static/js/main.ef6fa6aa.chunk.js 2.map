{"version":3,"sources":["redux/stateConstants.js","redux/actionConstants.js","redux/store.js","redux/reducers/usersReducer.js","redux/reducers/pageReducer.js","redux/actions.js","components/Timeline.jsx","views/App.js","serviceWorker.js","index.js"],"names":["USERS","users","PAGE","page","SET_USERS","SET_PAGE","rootReducer","combineReducers","state","action","type","payload","createStore","applyMiddleware","thunkMiddleware","setUsers","Timeline","dispatch","useDispatch","useSelector","useEffect","fetch","headers","mode","then","res","json","catch","error","console","log","getUsersByPage","map","user","i","name","App","store","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0NAAaA,EAAQ,CACjBC,MAAO,IAGEC,EAAO,CAChBC,KAAM,GCLGC,EAAY,YAEZC,EAAW,WCIlBC,EAAcC,YAAgB,CAChCN,MCHwB,WAA4B,IAA3BO,EAA0B,uDAAlBR,EAAOS,EAAW,uCACnD,OAAQA,EAAOC,MACX,KAAKN,EACD,OAAO,2BAAKI,GAAZ,IAAmBP,MAAOQ,EAAOE,QAAQV,QAC7C,QACI,OAAOO,IDDfL,KEJuB,WAA2B,IAA1BK,EAAyB,uDAAjBN,EAAMO,EAAW,uCACjD,OAAQA,EAAOC,MACX,KAAKL,EACD,OAAO,2BAAKG,GAAZ,IAAmBL,KAAMM,EAAOE,QAAQR,OAC5C,QACI,OAAOK,MFEJI,cAAYN,EAAaO,YAAgBC,MGc3CC,EAAW,SAAAd,GAAK,MAAK,CAC9BS,KAAMN,EACNO,QAAS,CACLV,MAAOA,KCJAe,EApBE,WACb,IAAMC,EAAWC,cAEXf,EAAOgB,aAAY,SAAAX,GAAK,OAAIA,EAAML,KAAKA,QAEvCF,EAAQkB,aAAY,SAAAX,GAAK,OAAIA,EAAMP,MAAMA,SAI/C,OAFAmB,qBAAU,kBAAMH,EDTW,SAACd,GAC5B,OAAO,SAAAc,GACHI,MAAM,eAAD,OACclB,GACf,CACImB,QAAS,CACL,8BAA+B,IAC/B,eAAgB,mBAChB,+BAAgC,KAEpCC,KAAM,SAGTC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAE,GAAI,OAAIT,EAASF,EAASW,OAC/BC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OCTCG,CAAe5B,MAAQ,CAACc,EAAUd,IAGvD,mCACI,6BAEQF,EAAM+B,KAAI,SAACC,EAAMC,GAAP,OAAa,6BAAaD,EAAKE,MAATD,WCPrCE,EALH,kBACV,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.ef6fa6aa.chunk.js","sourcesContent":["export const USERS = {\n    users: []\n}\n\nexport const PAGE = {\n    page: 1\n}\n\nexport const CURRENT_USER_NONE = \"NONE\";\n\nexport const CURRENT_USER = {\n    currentUser: CURRENT_USER_NONE\n}","export const SET_USERS = \"SET_USERS\";\n\nexport const SET_PAGE = \"SET_PAGE\";","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport { usersReducer } from \"./reducers/usersReducer\";\nimport {pageReducer} from \"./reducers/pageReducer\";\n\nconst rootReducer = combineReducers({\n    users: usersReducer,\n    page: pageReducer\n})\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","import { USERS } from \"../stateConstants\";\n\nimport { SET_USERS } from \"../actionConstants\";\n\nexport const usersReducer = (state = USERS, action) => {\n    switch (action.type) {\n        case SET_USERS:\n            return { ...state, users: action.payload.users };\n        default:\n            return state;\n    }\n};\n","import { PAGE } from \"../stateConstants\";\n\nimport { SET_PAGE } from \"../actionConstants\";\n\nexport const pageReducer = (state = PAGE, action) => {\n    switch (action.type) {\n        case SET_PAGE:\n            return { ...state, page: action.payload.page };\n        default:\n            return state;\n    }\n};\n","import {SET_PAGE, SET_USERS} from \"./actionConstants\";\n\nexport const getUsersByPage  = (page) => {\n    return dispatch => {\n        fetch(\n            `/users/page/${page}`,\n            {\n                headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Content-Type\": \"application/json\",\n                    'Access-Control-Allow-Headers': \"*\"\n                },\n                mode: \"cors\"\n            }\n        )\n            .then(res => {\n                return res.json();\n            })\n            .then(json => dispatch(setUsers(json)))\n            .catch(error => {\n                console.log(error);\n            });\n    }\n}\n\nexport const setUsers = users => ({\n    type: SET_USERS,\n    payload: {\n        users: users\n    }\n});\n\nexport const setPage = page => ({\n    type: SET_PAGE,\n    payload: {\n        page: page\n    }\n});","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUsersByPage} from \"../redux/actions\";\n\nconst Timeline = () => {\n    const dispatch = useDispatch();\n\n    const page = useSelector(state => state.page.page);\n\n    const users = useSelector(state => state.users.users);\n\n    useEffect(() => dispatch(getUsersByPage(page)), [dispatch, page]);\n\n    return (\n        <>\n            <ul>\n                {\n                    users.map((user, i) => <li key={i}>{user.name}</li>)\n                }\n            </ul>\n        </>\n    )\n};\n\nexport default Timeline;","import React from 'react';\nimport {Provider} from \"react-redux\"; // Automatically passes the store to all child components\nimport store from \"../redux/store\"; // The store and main reducer\nimport Timeline from \"../components/Timeline\";\n\nconst App = () => \n  <Provider store={store}>\n    <Timeline/>\n  </Provider>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}