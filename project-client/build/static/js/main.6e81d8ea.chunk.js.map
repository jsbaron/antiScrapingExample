{"version":3,"sources":["redux/actionConstants.js","redux/actions.js","redux/stateConstants.js","utils/API.js","components/PageNav.jsx","components/Timeline.jsx","components/HomeNav.jsx","components/UserPage.jsx","views/App.js","serviceWorker.js","redux/store.js","redux/reducers/usersReducer.js","redux/reducers/pageReducer.js","redux/reducers/currentUserReducer.js","index.js"],"names":["SET_USERS","SET_PAGE","SET_CURRENT_USER","setUsers","users","type","payload","setPage","page","setCurrentUser","user","currentUser","USERS","PAGE","CURRENT_USER_NONE","CURRENT_USER","USERS_ENFORCED","API","getUsersByPage","a","axios","get","data","response","status","Error","PageNav","useSelector","state","dispatch","useDispatch","getPageNum","i","className","Pagination","First","onClick","Prev","disabled","Array","fill","map","e","Item","active","Next","Last","Timeline","useEffect","fetchUsers","Alert","variant","ListGroup","Card","style","border","Title","Button","name","Body","text","Footer","Date","tweetCreated","toLocaleString","tweetLocation","HomeNav","Nav","Link","UserPage","Subtitle","description","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e81d8ea.chunk.js","sourcesContent":["export const SET_USERS = \"SET_USERS\";\n\nexport const SET_PAGE = \"SET_PAGE\";\n\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {SET_CURRENT_USER, SET_PAGE, SET_USERS} from \"./actionConstants\";\n\nexport const setUsers = users => ({\n    type: SET_USERS,\n    payload: {\n        users: users\n    }\n});\n\nexport const setPage = page => ({\n    type: SET_PAGE,\n    payload: {\n        page: page\n    }\n});\n\nexport const setCurrentUser = user => ({\n    type: SET_CURRENT_USER,\n    payload: {\n        currentUser: user\n    }\n});","export const USERS = {\n    users: []\n}\n\nexport const PAGE = {\n    page: 1\n}\n\nexport const CURRENT_USER_NONE = \"NONE\";\n\nexport const CURRENT_USER = {\n    currentUser: CURRENT_USER_NONE\n}\n\nexport const USERS_ENFORCED = {\n    users: \"ENFORCED\"\n}","import axios from \"axios\";\nimport {USERS_ENFORCED} from \"../redux/stateConstants\";\n\nconst BASE_URL = \"http://ec2-54-237-51-236.compute-1.amazonaws.com:8080/project_archive\"\n\n\nconst API =  {\n    getUsersByPage: async page => {\n\n        try {\n            const users = await axios.get(\n                BASE_URL + `/users/page/${page}`);\n            return users.data;\n        } catch (e) {\n            if (e.response && e.response.status === 429) {\n                return USERS_ENFORCED.users;\n            } else {\n                throw new Error(e);\n            }\n        }\n\n    }\n}\nexport default API;","import React from 'react';\nimport {Pagination} from \"react-bootstrap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setPage} from \"../redux/actions\";\n\nconst MAX_PAGES = 205;\n\nconst PageNav = () => {\n    const page = useSelector(state => state.page.page);\n\n    const dispatch = useDispatch();\n\n    const getNumPagesBefore = () => {\n        if (page < 6) {\n            return page - 1\n        }\n        return 5;\n    }\n\n    const getNumPagesAfter = () => {\n        if (page > 200) {\n            return MAX_PAGES - page\n        }\n        return 5;\n    }\n\n    const getPageNum = i => {\n        if (page >= 6) {\n            return page + ((i + 1) - 6);\n        }\n        return page + ((i+1) - page)\n    }\n\n    return (\n        <div className={\"d-flex\"}>\n            <Pagination className={\"mx-auto\"}>\n                <Pagination.First\n                    onClick={() => dispatch(setPage(1))}\n                />\n                <Pagination.Prev\n                    disabled={page === 1}\n                    onClick={() => dispatch(setPage(page - 1))}\n                />\n                {\n                    Array(getNumPagesBefore()).fill(0).map(\n                        (e, i) => <Pagination.Item\n                            key={i}\n                            onClick={() => dispatch(setPage(getPageNum(i)))}\n                        >\n                            {\n                                getPageNum(i)\n                            }\n                        </Pagination.Item>\n                    )\n                }\n                <Pagination.Item active>{page}</Pagination.Item>\n                {\n                    Array(getNumPagesAfter()).fill(0).map(\n                        (e, i) => <Pagination.Item\n                            key={i}\n                            onClick={() => dispatch(setPage(page + i + 1))}\n                        >\n                            {page + i + 1}\n                        </Pagination.Item>\n                    )\n                }\n                <Pagination.Next\n                    disabled={page === MAX_PAGES}\n                    onClick={() => dispatch(setPage(page + 1))}\n                />\n                <Pagination.Last\n                    onClick={() => dispatch(setPage(MAX_PAGES))}\n                />\n            </Pagination>\n        </div>\n    )\n};\n\nexport default PageNav;","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setCurrentUser, setUsers} from \"../redux/actions\";\nimport API from \"../utils/API\";\nimport {Button, Card, ListGroup, Alert} from \"react-bootstrap\";\nimport PageNav from \"./PageNav\";\nimport {USERS_ENFORCED} from \"../redux/stateConstants\";\n\nconst Timeline = () => {\n    const dispatch = useDispatch();\n\n    const page = useSelector(state => state.page.page);\n\n    const users = useSelector(state => state.users.users);\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            dispatch(setUsers(await API.getUsersByPage(page)));\n        }\n        fetchUsers();\n    }, [dispatch, page]);\n\n    return (\n        <>\n            {\n                users === USERS_ENFORCED.users ?\n                    <Alert variant={\"danger\"} className={\"ml-auto mr-auto mt-5\"}>\n                        <h3>You're making too many requests!</h3>\n                    </Alert>\n\n                    :\n                    <>\n                        <ListGroup className={\"mx-auto w-75 mt-5 mb-3\"}>\n                            {\n                                users.map((user, i) => (\n                                    <ListGroup.Item key={i}>\n                                        <Card style={{border: \"none\"}}>\n                                            <Card.Title>\n                                                <Button\n                                                    variant={\"link\"}\n                                                    onClick={() => {\n                                                        dispatch(setCurrentUser(user));\n                                                    }}\n                                                >\n                                                    {user.name}\n                                                </Button>\n                                            </Card.Title>\n                                            <Card.Body className={\"mt-0 pt-0\"}>{user.text}</Card.Body>\n                                            <Card.Footer className=\"text-muted\">\n                                                <div className={\"d-flex flex-row\"}>\n                                                    <div>{new Date(user.tweetCreated).toLocaleString()}</div>\n                                                    <div className={\"ml-auto\"}>\n                                                        {user.tweetLocation}\n                                                    </div>\n                                                </div>\n                                            </Card.Footer>\n                                        </Card>\n                                    </ListGroup.Item>\n                                ))\n                            }\n                        </ListGroup>\n                        <PageNav/>\n                    </>\n            }\n\n        </>\n    )\n};\n\nexport default Timeline;","import React from 'react';\nimport {Nav} from 'react-bootstrap';\nimport {useDispatch} from \"react-redux\";\nimport {setCurrentUser} from \"../redux/actions\";\nimport {CURRENT_USER_NONE} from \"../redux/stateConstants\";\n\nconst HomeNav = () => {\n    const dispatch = useDispatch();\n    return (\n        <Nav>\n            <Nav.Item className={\"m-3\"}>\n                <Nav.Link\n                    onClick={() => {\n                        dispatch(setCurrentUser(CURRENT_USER_NONE))\n                    }}\n                >\n                    Back to Timeline\n                </Nav.Link>\n            </Nav.Item>\n\n        </Nav>\n    )\n};\n\nexport default HomeNav;","import React from 'react';\nimport HomeNav from \"./HomeNav\";\nimport {Card} from \"react-bootstrap\";\nimport {useSelector} from \"react-redux\";\n\nconst UserPage = () => {\n\n    const currentUser = useSelector(state => state.currentUser.currentUser);\n\n    return (\n        <>\n            <HomeNav/>\n            <Card className={\"mx-auto w-75\"}>\n                <Card.Title className={\"text-center mb-3\"}>\n                    {currentUser.name}\n                </Card.Title>\n                <Card.Subtitle className={\"text-center mb-3\"}>\n                    {currentUser.description}\n                </Card.Subtitle>\n                <Card.Body className={\"text-center mb-3\"}>\n                    {currentUser.text}\n                </Card.Body>\n                <Card.Footer className=\"text-muted\">\n                    <div className={\"d-flex flex-row\"}>\n                        <div>{new Date(currentUser.tweetCreated).toLocaleString()}</div>\n                        <div className={\"ml-auto\"}>\n                            {currentUser.tweetLocation}\n                        </div>\n                    </div>\n                </Card.Footer>\n            </Card>\n        </>\n    )\n};\n\nexport default UserPage;","import React from 'react';\nimport Timeline from \"../components/Timeline\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {useSelector} from \"react-redux\";\nimport {CURRENT_USER_NONE} from \"../redux/stateConstants\";\nimport UserPage from \"../components/UserPage\";\n\nconst App = () => {\n\n    const currentUser = useSelector(state => state.currentUser.currentUser);\n    return (\n        <>\n            {\n                currentUser === CURRENT_USER_NONE?\n                    <Timeline/>\n                    : <UserPage/>\n            }\n\n        </>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport { usersReducer } from \"./reducers/usersReducer\";\nimport {pageReducer} from \"./reducers/pageReducer\";\nimport {currentUserReducer} from \"./reducers/currentUserReducer\";\n\nconst rootReducer = combineReducers({\n    users: usersReducer,\n    page: pageReducer,\n    currentUser: currentUserReducer\n})\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","import { USERS } from \"../stateConstants\";\n\nimport { SET_USERS } from \"../actionConstants\";\n\nexport const usersReducer = (state = USERS, action) => {\n    switch (action.type) {\n        case SET_USERS:\n            return { ...state, users: action.payload.users };\n        default:\n            return state;\n    }\n};\n","import { PAGE } from \"../stateConstants\";\n\nimport { SET_PAGE } from \"../actionConstants\";\n\nexport const pageReducer = (state = PAGE, action) => {\n    switch (action.type) {\n        case SET_PAGE:\n            return { ...state, page: action.payload.page };\n        default:\n            return state;\n    }\n};\n","import { CURRENT_USER } from \"../stateConstants\";\n\nimport { SET_CURRENT_USER } from \"../actionConstants\";\n\nexport const currentUserReducer = (state = CURRENT_USER, action) => {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return { ...state, currentUser: action.payload.currentUser };\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}